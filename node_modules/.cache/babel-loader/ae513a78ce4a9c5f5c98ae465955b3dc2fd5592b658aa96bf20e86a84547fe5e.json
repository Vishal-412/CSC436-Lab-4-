{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\workspace\\\\myblog\\\\src\\\\Post.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\n// Import React and useState from the React library\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Post({\n  post\n}) {\n  _s();\n  // Define a functional component named Post that takes a 'post' prop\n  function formatDate(dateString) {\n    // Helper function to format a date string\n    if (dateString) {\n      // Check if the date string is provided\n      const date = new Date(dateString); // Create a Date object from the date string\n      const formattedDate = date.toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      });\n      return formattedDate; // Format the date\n    }\n\n    return \"Not Applicable\";\n  }\n  function formatDateTime(dateTime) {\n    // Helper function to format a date and time string\n    if (dateTime) {\n      // Check if the date and time are provided\n      return dateTime.toLocaleString(); // Format with date, time\n    }\n\n    return \"Not Applicable\";\n  }\n  const [isComplete, setIsComplete] = useState(post.complete);\n  // State variable to manage completion status, initialized with the 'complete' property of the 'post' prop\n  const [completionDate, setCompletionDate] = useState(post.dateCompleted);\n  // State variable to manage completion date, initialized with the 'dateCompleted' property of the 'post' prop\n  function handleCompleteToggle() {\n    // Function to handle the completion toggle\n    setIsComplete(!isComplete); // Toggle the completion status\n    if (!completionDate) {\n      // If completion date is not set\n      // Get the current time in the Chicago time zone (Central Time Zone)\n      const chicagoTime = new Date().toLocaleString(\"en-US\", {\n        timeZone: \"America/Chicago\"\n      });\n      // Set the completion date to Chicago time\n      setCompletionDate(new Date(chicagoTime));\n    } else {\n      setCompletionDate('');\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: post.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: post.content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n      children: [\"Written by \", /*#__PURE__*/_jsxDEV(\"b\", {\n        children: post.author\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        children: [\"Date Created: \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: formatDateTime(new Date(post.dateCreated))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post\",\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: isComplete,\n          onChange: handleCompleteToggle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 1\n        }, this), \" Complete\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 1\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 1\n    }, this), isComplete && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        children: [\"Date Completed: \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: formatDateTime(new Date(completionDate))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 20\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 1\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 1\n  }, this);\n}\n_s(Post, \"hYLuNaUlWLLihLd7iFjMsedDnx0=\");\n_c = Post;\nvar _c;\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Post","post","_s","formatDate","dateString","date","Date","formattedDate","toLocaleDateString","year","month","day","formatDateTime","dateTime","toLocaleString","isComplete","setIsComplete","complete","completionDate","setCompletionDate","dateCompleted","handleCompleteToggle","chicagoTime","timeZone","children","title","fileName","_jsxFileName","lineNumber","columnNumber","content","author","dateCreated","className","type","checked","onChange","_c","$RefreshReg$"],"sources":["C:/Users/user/workspace/myblog/src/Post.js"],"sourcesContent":["import React, { useState } from \"react\"; \r\n// Import React and useState from the React library\r\nexport default function Post({ post }) {\r\n// Define a functional component named Post that takes a 'post' prop\r\nfunction formatDate(dateString) { // Helper function to format a date string\r\nif (dateString) {   // Check if the date string is provided\r\nconst date = new Date(dateString);  // Create a Date object from the date string\r\nconst formattedDate = date.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' });\r\nreturn formattedDate; // Format the date\r\n}\r\nreturn \"Not Applicable\";\r\n}\r\nfunction formatDateTime(dateTime) {\r\n// Helper function to format a date and time string\r\nif (dateTime) {\r\n// Check if the date and time are provided\r\nreturn dateTime.toLocaleString(); // Format with date, time\r\n}\r\nreturn \"Not Applicable\";\r\n}\r\nconst [isComplete, setIsComplete] = useState(post.complete);\r\n// State variable to manage completion status, initialized with the 'complete' property of the 'post' prop\r\nconst [completionDate, setCompletionDate] = useState(post.dateCompleted);\r\n// State variable to manage completion date, initialized with the 'dateCompleted' property of the 'post' prop\r\nfunction handleCompleteToggle() { // Function to handle the completion toggle\r\nsetIsComplete(!isComplete);  // Toggle the completion status\r\nif (!completionDate) {  // If completion date is not set\r\n// Get the current time in the Chicago time zone (Central Time Zone)\r\nconst chicagoTime = new Date().toLocaleString(\"en-US\", {\r\ntimeZone: \"America/Chicago\",\r\n});\r\n// Set the completion date to Chicago time\r\nsetCompletionDate(new Date(chicagoTime));\r\n} else {\r\nsetCompletionDate('');\r\n}\r\n}\r\nreturn (\r\n<div>\r\n<h3>{post.title}</h3>\r\n<div>{post.content}</div>\r\n<br />\r\n<i>Written by <b>{post.author}</b></i>\r\n<div><i>Date Created: <b>{formatDateTime(new Date(post.dateCreated))}</b></i></div>\r\n<div className=\"post\">\r\n<label>\r\n<input\r\ntype=\"checkbox\"\r\nchecked={isComplete}\r\nonChange={handleCompleteToggle}\r\n/> Complete\r\n</label>\r\n</div>\r\n{isComplete && (\r\n<div>\r\n<i>Date Completed: <b>{formatDateTime(new Date(completionDate))}</b></i>\r\n</div>\r\n)}\r\n</div>\r\n);\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}